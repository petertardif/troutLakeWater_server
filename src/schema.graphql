scalar DateTime

enum TLRoadSide {
	NORTH
	SOUTH
}

enum LandCompany {
	TROUT_LAKE_LAND_COMPANY
	LIZARD_HEAD_LAND_COMPANY
}

enum Association {
	TL_OWNERS_ASSOCIATION
	LHLC_OWNERS_ASSOCIATION
}

type Query {
	owners: [Owner!]!
	owner(id: ID): Owner
	sites: [Site!]!
	site(id: ID): Site
}

type Mutation {
	createNewOwner(
		last_name: String!
		first_name: String!
		primary_email: String!
		alt_email: String
		password: String!
		perm_phone_number: String
		other_phone_number: String
	): Owner!
	createSite(
		site_number: Int!
		tl_road_side: TLRoadSide!
		tl_address: String!
		land_company: LandCompany!
		owners_association: Association!
		trout_lake_water: Boolean!
		site_phone_number: String
	): Site!
	createPermAddress(
		address: String!
		city: String!
		state: String!
		zip_code: String!
	): PermAddress!
	signup(
		last_name: String!
		first_name: String!
		primary_email: String!
		alt_email: String
		password: String!
		perm_phone_number: String
		other_phone_number: String
	): AuthPayload
	login(primary_email: String!, password: String!): AuthPayload
}

type AuthPayload {
	token: String
	owner: Owner
}

type Owner {
	id: ID!
	last_name: String!
	first_name: String!
	primary_email: String!
	alt_email: String
	password: String!
	perm_phone_number: String
	other_phone_number: String
	p_addresses: PermAddress
}

type PermAddress {
	id: ID!
	address: String!
	city: String!
	state: String!
	zip_code: Int!
	createdBy: Owner
}

type Site {
	id: ID!
	site_number: Int!
	tl_road_side: TLRoadSide!
	tl_address: String!
	land_company: LandCompany!
	owners_association: Association!
	trout_lake_water: Boolean!
	owners: [Owner!]!
	site_phone_number: String
}

type Bill {
	id: ID!
	year: Int!
	payment: Payment
	payment_due: DateTime!
	site: Site
}

type Payment {
	id: ID!
	paid: Boolean!
	payment_type: String!
	date_paid: DateTime! 
	bills: [Bill!]!
}
