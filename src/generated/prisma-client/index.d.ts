// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  bill: (where?: BillWhereInput) => Promise<boolean>;
  payment: (where?: PaymentWhereInput) => Promise<boolean>;
  permAddress: (where?: PermAddressWhereInput) => Promise<boolean>;
  site: (where?: SiteWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  bill: (where: BillWhereUniqueInput) => BillNullablePromise;
  bills: (args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Bill>;
  billsConnection: (args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BillConnectionPromise;
  payment: (where: PaymentWhereUniqueInput) => PaymentNullablePromise;
  payments: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Payment>;
  paymentsConnection: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PaymentConnectionPromise;
  permAddress: (
    where: PermAddressWhereUniqueInput
  ) => PermAddressNullablePromise;
  permAddresses: (args?: {
    where?: PermAddressWhereInput;
    orderBy?: PermAddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PermAddress>;
  permAddressesConnection: (args?: {
    where?: PermAddressWhereInput;
    orderBy?: PermAddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PermAddressConnectionPromise;
  site: (where: SiteWhereUniqueInput) => SiteNullablePromise;
  sites: (args?: {
    where?: SiteWhereInput;
    orderBy?: SiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Site>;
  sitesConnection: (args?: {
    where?: SiteWhereInput;
    orderBy?: SiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SiteConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBill: (data: BillCreateInput) => BillPromise;
  updateBill: (args: {
    data: BillUpdateInput;
    where: BillWhereUniqueInput;
  }) => BillPromise;
  updateManyBills: (args: {
    data: BillUpdateManyMutationInput;
    where?: BillWhereInput;
  }) => BatchPayloadPromise;
  upsertBill: (args: {
    where: BillWhereUniqueInput;
    create: BillCreateInput;
    update: BillUpdateInput;
  }) => BillPromise;
  deleteBill: (where: BillWhereUniqueInput) => BillPromise;
  deleteManyBills: (where?: BillWhereInput) => BatchPayloadPromise;
  createPayment: (data: PaymentCreateInput) => PaymentPromise;
  updatePayment: (args: {
    data: PaymentUpdateInput;
    where: PaymentWhereUniqueInput;
  }) => PaymentPromise;
  updateManyPayments: (args: {
    data: PaymentUpdateManyMutationInput;
    where?: PaymentWhereInput;
  }) => BatchPayloadPromise;
  upsertPayment: (args: {
    where: PaymentWhereUniqueInput;
    create: PaymentCreateInput;
    update: PaymentUpdateInput;
  }) => PaymentPromise;
  deletePayment: (where: PaymentWhereUniqueInput) => PaymentPromise;
  deleteManyPayments: (where?: PaymentWhereInput) => BatchPayloadPromise;
  createPermAddress: (data: PermAddressCreateInput) => PermAddressPromise;
  updatePermAddress: (args: {
    data: PermAddressUpdateInput;
    where: PermAddressWhereUniqueInput;
  }) => PermAddressPromise;
  updateManyPermAddresses: (args: {
    data: PermAddressUpdateManyMutationInput;
    where?: PermAddressWhereInput;
  }) => BatchPayloadPromise;
  upsertPermAddress: (args: {
    where: PermAddressWhereUniqueInput;
    create: PermAddressCreateInput;
    update: PermAddressUpdateInput;
  }) => PermAddressPromise;
  deletePermAddress: (where: PermAddressWhereUniqueInput) => PermAddressPromise;
  deleteManyPermAddresses: (
    where?: PermAddressWhereInput
  ) => BatchPayloadPromise;
  createSite: (data: SiteCreateInput) => SitePromise;
  updateSite: (args: {
    data: SiteUpdateInput;
    where: SiteWhereUniqueInput;
  }) => SitePromise;
  updateManySites: (args: {
    data: SiteUpdateManyMutationInput;
    where?: SiteWhereInput;
  }) => BatchPayloadPromise;
  upsertSite: (args: {
    where: SiteWhereUniqueInput;
    create: SiteCreateInput;
    update: SiteUpdateInput;
  }) => SitePromise;
  deleteSite: (where: SiteWhereUniqueInput) => SitePromise;
  deleteManySites: (where?: SiteWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  bill: (
    where?: BillSubscriptionWhereInput
  ) => BillSubscriptionPayloadSubscription;
  payment: (
    where?: PaymentSubscriptionWhereInput
  ) => PaymentSubscriptionPayloadSubscription;
  permAddress: (
    where?: PermAddressSubscriptionWhereInput
  ) => PermAddressSubscriptionPayloadSubscription;
  site: (
    where?: SiteSubscriptionWhereInput
  ) => SiteSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "primary_email_ASC"
  | "primary_email_DESC"
  | "alt_email_ASC"
  | "alt_email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "perm_phone_number_ASC"
  | "perm_phone_number_DESC"
  | "other_phone_number_ASC"
  | "other_phone_number_DESC"
  | "role_ASC"
  | "role_DESC"
  | "isDeleted_ASC"
  | "isDeleted_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BillOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "year_ASC"
  | "year_DESC"
  | "isPaid_ASC"
  | "isPaid_DESC"
  | "payment_due_ASC"
  | "payment_due_DESC";

export type PaymentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "paid_ASC"
  | "paid_DESC"
  | "payment_type_ASC"
  | "payment_type_DESC"
  | "date_paid_ASC"
  | "date_paid_DESC";

export type PermAddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zip_code_ASC"
  | "zip_code_DESC";

export type SiteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "site_number_ASC"
  | "site_number_DESC"
  | "tl_road_side_ASC"
  | "tl_road_side_DESC"
  | "tl_address_ASC"
  | "tl_address_DESC"
  | "land_company_ASC"
  | "land_company_DESC"
  | "owners_association_ASC"
  | "owners_association_DESC"
  | "trout_lake_water_ASC"
  | "trout_lake_water_DESC"
  | "site_phone_number_ASC"
  | "site_phone_number_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BillWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  last_name?: Maybe<String>;
  last_name_not?: Maybe<String>;
  last_name_in?: Maybe<String[] | String>;
  last_name_not_in?: Maybe<String[] | String>;
  last_name_lt?: Maybe<String>;
  last_name_lte?: Maybe<String>;
  last_name_gt?: Maybe<String>;
  last_name_gte?: Maybe<String>;
  last_name_contains?: Maybe<String>;
  last_name_not_contains?: Maybe<String>;
  last_name_starts_with?: Maybe<String>;
  last_name_not_starts_with?: Maybe<String>;
  last_name_ends_with?: Maybe<String>;
  last_name_not_ends_with?: Maybe<String>;
  first_name?: Maybe<String>;
  first_name_not?: Maybe<String>;
  first_name_in?: Maybe<String[] | String>;
  first_name_not_in?: Maybe<String[] | String>;
  first_name_lt?: Maybe<String>;
  first_name_lte?: Maybe<String>;
  first_name_gt?: Maybe<String>;
  first_name_gte?: Maybe<String>;
  first_name_contains?: Maybe<String>;
  first_name_not_contains?: Maybe<String>;
  first_name_starts_with?: Maybe<String>;
  first_name_not_starts_with?: Maybe<String>;
  first_name_ends_with?: Maybe<String>;
  first_name_not_ends_with?: Maybe<String>;
  primary_email?: Maybe<String>;
  primary_email_not?: Maybe<String>;
  primary_email_in?: Maybe<String[] | String>;
  primary_email_not_in?: Maybe<String[] | String>;
  primary_email_lt?: Maybe<String>;
  primary_email_lte?: Maybe<String>;
  primary_email_gt?: Maybe<String>;
  primary_email_gte?: Maybe<String>;
  primary_email_contains?: Maybe<String>;
  primary_email_not_contains?: Maybe<String>;
  primary_email_starts_with?: Maybe<String>;
  primary_email_not_starts_with?: Maybe<String>;
  primary_email_ends_with?: Maybe<String>;
  primary_email_not_ends_with?: Maybe<String>;
  alt_email?: Maybe<String>;
  alt_email_not?: Maybe<String>;
  alt_email_in?: Maybe<String[] | String>;
  alt_email_not_in?: Maybe<String[] | String>;
  alt_email_lt?: Maybe<String>;
  alt_email_lte?: Maybe<String>;
  alt_email_gt?: Maybe<String>;
  alt_email_gte?: Maybe<String>;
  alt_email_contains?: Maybe<String>;
  alt_email_not_contains?: Maybe<String>;
  alt_email_starts_with?: Maybe<String>;
  alt_email_not_starts_with?: Maybe<String>;
  alt_email_ends_with?: Maybe<String>;
  alt_email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  perm_phone_number?: Maybe<String>;
  perm_phone_number_not?: Maybe<String>;
  perm_phone_number_in?: Maybe<String[] | String>;
  perm_phone_number_not_in?: Maybe<String[] | String>;
  perm_phone_number_lt?: Maybe<String>;
  perm_phone_number_lte?: Maybe<String>;
  perm_phone_number_gt?: Maybe<String>;
  perm_phone_number_gte?: Maybe<String>;
  perm_phone_number_contains?: Maybe<String>;
  perm_phone_number_not_contains?: Maybe<String>;
  perm_phone_number_starts_with?: Maybe<String>;
  perm_phone_number_not_starts_with?: Maybe<String>;
  perm_phone_number_ends_with?: Maybe<String>;
  perm_phone_number_not_ends_with?: Maybe<String>;
  other_phone_number?: Maybe<String>;
  other_phone_number_not?: Maybe<String>;
  other_phone_number_in?: Maybe<String[] | String>;
  other_phone_number_not_in?: Maybe<String[] | String>;
  other_phone_number_lt?: Maybe<String>;
  other_phone_number_lte?: Maybe<String>;
  other_phone_number_gt?: Maybe<String>;
  other_phone_number_gte?: Maybe<String>;
  other_phone_number_contains?: Maybe<String>;
  other_phone_number_not_contains?: Maybe<String>;
  other_phone_number_starts_with?: Maybe<String>;
  other_phone_number_not_starts_with?: Maybe<String>;
  other_phone_number_ends_with?: Maybe<String>;
  other_phone_number_not_ends_with?: Maybe<String>;
  p_addresses?: Maybe<PermAddressWhereInput>;
  role?: Maybe<String>;
  role_not?: Maybe<String>;
  role_in?: Maybe<String[] | String>;
  role_not_in?: Maybe<String[] | String>;
  role_lt?: Maybe<String>;
  role_lte?: Maybe<String>;
  role_gt?: Maybe<String>;
  role_gte?: Maybe<String>;
  role_contains?: Maybe<String>;
  role_not_contains?: Maybe<String>;
  role_starts_with?: Maybe<String>;
  role_not_starts_with?: Maybe<String>;
  role_ends_with?: Maybe<String>;
  role_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Boolean>;
  isDeleted_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PermAddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  zip_code?: Maybe<String>;
  zip_code_not?: Maybe<String>;
  zip_code_in?: Maybe<String[] | String>;
  zip_code_not_in?: Maybe<String[] | String>;
  zip_code_lt?: Maybe<String>;
  zip_code_lte?: Maybe<String>;
  zip_code_gt?: Maybe<String>;
  zip_code_gte?: Maybe<String>;
  zip_code_contains?: Maybe<String>;
  zip_code_not_contains?: Maybe<String>;
  zip_code_starts_with?: Maybe<String>;
  zip_code_not_starts_with?: Maybe<String>;
  zip_code_ends_with?: Maybe<String>;
  zip_code_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<UserWhereInput>;
  AND?: Maybe<PermAddressWhereInput[] | PermAddressWhereInput>;
  OR?: Maybe<PermAddressWhereInput[] | PermAddressWhereInput>;
  NOT?: Maybe<PermAddressWhereInput[] | PermAddressWhereInput>;
}

export interface BillWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  year?: Maybe<Int>;
  year_not?: Maybe<Int>;
  year_in?: Maybe<Int[] | Int>;
  year_not_in?: Maybe<Int[] | Int>;
  year_lt?: Maybe<Int>;
  year_lte?: Maybe<Int>;
  year_gt?: Maybe<Int>;
  year_gte?: Maybe<Int>;
  isPaid?: Maybe<Boolean>;
  isPaid_not?: Maybe<Boolean>;
  payment_due?: Maybe<DateTimeInput>;
  payment_due_not?: Maybe<DateTimeInput>;
  payment_due_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  payment_due_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  payment_due_lt?: Maybe<DateTimeInput>;
  payment_due_lte?: Maybe<DateTimeInput>;
  payment_due_gt?: Maybe<DateTimeInput>;
  payment_due_gte?: Maybe<DateTimeInput>;
  site?: Maybe<SiteWhereInput>;
  payment?: Maybe<PaymentWhereInput>;
  AND?: Maybe<BillWhereInput[] | BillWhereInput>;
  OR?: Maybe<BillWhereInput[] | BillWhereInput>;
  NOT?: Maybe<BillWhereInput[] | BillWhereInput>;
}

export interface SiteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  site_number?: Maybe<Int>;
  site_number_not?: Maybe<Int>;
  site_number_in?: Maybe<Int[] | Int>;
  site_number_not_in?: Maybe<Int[] | Int>;
  site_number_lt?: Maybe<Int>;
  site_number_lte?: Maybe<Int>;
  site_number_gt?: Maybe<Int>;
  site_number_gte?: Maybe<Int>;
  tl_road_side?: Maybe<String>;
  tl_road_side_not?: Maybe<String>;
  tl_road_side_in?: Maybe<String[] | String>;
  tl_road_side_not_in?: Maybe<String[] | String>;
  tl_road_side_lt?: Maybe<String>;
  tl_road_side_lte?: Maybe<String>;
  tl_road_side_gt?: Maybe<String>;
  tl_road_side_gte?: Maybe<String>;
  tl_road_side_contains?: Maybe<String>;
  tl_road_side_not_contains?: Maybe<String>;
  tl_road_side_starts_with?: Maybe<String>;
  tl_road_side_not_starts_with?: Maybe<String>;
  tl_road_side_ends_with?: Maybe<String>;
  tl_road_side_not_ends_with?: Maybe<String>;
  tl_address?: Maybe<String>;
  tl_address_not?: Maybe<String>;
  tl_address_in?: Maybe<String[] | String>;
  tl_address_not_in?: Maybe<String[] | String>;
  tl_address_lt?: Maybe<String>;
  tl_address_lte?: Maybe<String>;
  tl_address_gt?: Maybe<String>;
  tl_address_gte?: Maybe<String>;
  tl_address_contains?: Maybe<String>;
  tl_address_not_contains?: Maybe<String>;
  tl_address_starts_with?: Maybe<String>;
  tl_address_not_starts_with?: Maybe<String>;
  tl_address_ends_with?: Maybe<String>;
  tl_address_not_ends_with?: Maybe<String>;
  land_company?: Maybe<String>;
  land_company_not?: Maybe<String>;
  land_company_in?: Maybe<String[] | String>;
  land_company_not_in?: Maybe<String[] | String>;
  land_company_lt?: Maybe<String>;
  land_company_lte?: Maybe<String>;
  land_company_gt?: Maybe<String>;
  land_company_gte?: Maybe<String>;
  land_company_contains?: Maybe<String>;
  land_company_not_contains?: Maybe<String>;
  land_company_starts_with?: Maybe<String>;
  land_company_not_starts_with?: Maybe<String>;
  land_company_ends_with?: Maybe<String>;
  land_company_not_ends_with?: Maybe<String>;
  owners_association?: Maybe<String>;
  owners_association_not?: Maybe<String>;
  owners_association_in?: Maybe<String[] | String>;
  owners_association_not_in?: Maybe<String[] | String>;
  owners_association_lt?: Maybe<String>;
  owners_association_lte?: Maybe<String>;
  owners_association_gt?: Maybe<String>;
  owners_association_gte?: Maybe<String>;
  owners_association_contains?: Maybe<String>;
  owners_association_not_contains?: Maybe<String>;
  owners_association_starts_with?: Maybe<String>;
  owners_association_not_starts_with?: Maybe<String>;
  owners_association_ends_with?: Maybe<String>;
  owners_association_not_ends_with?: Maybe<String>;
  trout_lake_water?: Maybe<Boolean>;
  trout_lake_water_not?: Maybe<Boolean>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  site_phone_number?: Maybe<String>;
  site_phone_number_not?: Maybe<String>;
  site_phone_number_in?: Maybe<String[] | String>;
  site_phone_number_not_in?: Maybe<String[] | String>;
  site_phone_number_lt?: Maybe<String>;
  site_phone_number_lte?: Maybe<String>;
  site_phone_number_gt?: Maybe<String>;
  site_phone_number_gte?: Maybe<String>;
  site_phone_number_contains?: Maybe<String>;
  site_phone_number_not_contains?: Maybe<String>;
  site_phone_number_starts_with?: Maybe<String>;
  site_phone_number_not_starts_with?: Maybe<String>;
  site_phone_number_ends_with?: Maybe<String>;
  site_phone_number_not_ends_with?: Maybe<String>;
  bills_every?: Maybe<BillWhereInput>;
  bills_some?: Maybe<BillWhereInput>;
  bills_none?: Maybe<BillWhereInput>;
  AND?: Maybe<SiteWhereInput[] | SiteWhereInput>;
  OR?: Maybe<SiteWhereInput[] | SiteWhereInput>;
  NOT?: Maybe<SiteWhereInput[] | SiteWhereInput>;
}

export interface PaymentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  paid?: Maybe<Boolean>;
  paid_not?: Maybe<Boolean>;
  payment_type?: Maybe<String>;
  payment_type_not?: Maybe<String>;
  payment_type_in?: Maybe<String[] | String>;
  payment_type_not_in?: Maybe<String[] | String>;
  payment_type_lt?: Maybe<String>;
  payment_type_lte?: Maybe<String>;
  payment_type_gt?: Maybe<String>;
  payment_type_gte?: Maybe<String>;
  payment_type_contains?: Maybe<String>;
  payment_type_not_contains?: Maybe<String>;
  payment_type_starts_with?: Maybe<String>;
  payment_type_not_starts_with?: Maybe<String>;
  payment_type_ends_with?: Maybe<String>;
  payment_type_not_ends_with?: Maybe<String>;
  date_paid?: Maybe<DateTimeInput>;
  date_paid_not?: Maybe<DateTimeInput>;
  date_paid_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_paid_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_paid_lt?: Maybe<DateTimeInput>;
  date_paid_lte?: Maybe<DateTimeInput>;
  date_paid_gt?: Maybe<DateTimeInput>;
  date_paid_gte?: Maybe<DateTimeInput>;
  bills_every?: Maybe<BillWhereInput>;
  bills_some?: Maybe<BillWhereInput>;
  bills_none?: Maybe<BillWhereInput>;
  AND?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  OR?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  NOT?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
}

export type PaymentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PermAddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SiteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  site_number?: Maybe<Int>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  primary_email?: Maybe<String>;
  alt_email?: Maybe<String>;
}>;

export interface BillCreateInput {
  year: Int;
  isPaid?: Maybe<Boolean>;
  payment_due: DateTimeInput;
  site: SiteCreateOneWithoutBillsInput;
  payment?: Maybe<PaymentCreateOneWithoutBillsInput>;
}

export interface SiteCreateOneWithoutBillsInput {
  create?: Maybe<SiteCreateWithoutBillsInput>;
  connect?: Maybe<SiteWhereUniqueInput>;
}

export interface SiteCreateWithoutBillsInput {
  site_number: Int;
  tl_road_side: String;
  tl_address: String;
  land_company: String;
  owners_association: String;
  trout_lake_water: Boolean;
  users?: Maybe<UserCreateManyInput>;
  site_phone_number?: Maybe<String>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateInput {
  last_name: String;
  first_name: String;
  primary_email: String;
  alt_email?: Maybe<String>;
  password: String;
  perm_phone_number?: Maybe<String>;
  other_phone_number?: Maybe<String>;
  p_addresses?: Maybe<PermAddressCreateOneWithoutCreatedByInput>;
  role?: Maybe<String>;
  isDeleted?: Maybe<Boolean>;
}

export interface PermAddressCreateOneWithoutCreatedByInput {
  create?: Maybe<PermAddressCreateWithoutCreatedByInput>;
  connect?: Maybe<PermAddressWhereUniqueInput>;
}

export interface PermAddressCreateWithoutCreatedByInput {
  address: String;
  city: String;
  state: String;
  zip_code: String;
}

export interface PaymentCreateOneWithoutBillsInput {
  create?: Maybe<PaymentCreateWithoutBillsInput>;
  connect?: Maybe<PaymentWhereUniqueInput>;
}

export interface PaymentCreateWithoutBillsInput {
  paid?: Maybe<Boolean>;
  payment_type: String;
}

export interface BillUpdateInput {
  year?: Maybe<Int>;
  isPaid?: Maybe<Boolean>;
  payment_due?: Maybe<DateTimeInput>;
  site?: Maybe<SiteUpdateOneRequiredWithoutBillsInput>;
  payment?: Maybe<PaymentUpdateOneWithoutBillsInput>;
}

export interface SiteUpdateOneRequiredWithoutBillsInput {
  create?: Maybe<SiteCreateWithoutBillsInput>;
  update?: Maybe<SiteUpdateWithoutBillsDataInput>;
  upsert?: Maybe<SiteUpsertWithoutBillsInput>;
  connect?: Maybe<SiteWhereUniqueInput>;
}

export interface SiteUpdateWithoutBillsDataInput {
  site_number?: Maybe<Int>;
  tl_road_side?: Maybe<String>;
  tl_address?: Maybe<String>;
  land_company?: Maybe<String>;
  owners_association?: Maybe<String>;
  trout_lake_water?: Maybe<Boolean>;
  users?: Maybe<UserUpdateManyInput>;
  site_phone_number?: Maybe<String>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateDataInput {
  last_name?: Maybe<String>;
  first_name?: Maybe<String>;
  primary_email?: Maybe<String>;
  alt_email?: Maybe<String>;
  password?: Maybe<String>;
  perm_phone_number?: Maybe<String>;
  other_phone_number?: Maybe<String>;
  p_addresses?: Maybe<PermAddressUpdateOneWithoutCreatedByInput>;
  role?: Maybe<String>;
  isDeleted?: Maybe<Boolean>;
}

export interface PermAddressUpdateOneWithoutCreatedByInput {
  create?: Maybe<PermAddressCreateWithoutCreatedByInput>;
  update?: Maybe<PermAddressUpdateWithoutCreatedByDataInput>;
  upsert?: Maybe<PermAddressUpsertWithoutCreatedByInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PermAddressWhereUniqueInput>;
}

export interface PermAddressUpdateWithoutCreatedByDataInput {
  address?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip_code?: Maybe<String>;
}

export interface PermAddressUpsertWithoutCreatedByInput {
  update: PermAddressUpdateWithoutCreatedByDataInput;
  create: PermAddressCreateWithoutCreatedByInput;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  last_name?: Maybe<String>;
  last_name_not?: Maybe<String>;
  last_name_in?: Maybe<String[] | String>;
  last_name_not_in?: Maybe<String[] | String>;
  last_name_lt?: Maybe<String>;
  last_name_lte?: Maybe<String>;
  last_name_gt?: Maybe<String>;
  last_name_gte?: Maybe<String>;
  last_name_contains?: Maybe<String>;
  last_name_not_contains?: Maybe<String>;
  last_name_starts_with?: Maybe<String>;
  last_name_not_starts_with?: Maybe<String>;
  last_name_ends_with?: Maybe<String>;
  last_name_not_ends_with?: Maybe<String>;
  first_name?: Maybe<String>;
  first_name_not?: Maybe<String>;
  first_name_in?: Maybe<String[] | String>;
  first_name_not_in?: Maybe<String[] | String>;
  first_name_lt?: Maybe<String>;
  first_name_lte?: Maybe<String>;
  first_name_gt?: Maybe<String>;
  first_name_gte?: Maybe<String>;
  first_name_contains?: Maybe<String>;
  first_name_not_contains?: Maybe<String>;
  first_name_starts_with?: Maybe<String>;
  first_name_not_starts_with?: Maybe<String>;
  first_name_ends_with?: Maybe<String>;
  first_name_not_ends_with?: Maybe<String>;
  primary_email?: Maybe<String>;
  primary_email_not?: Maybe<String>;
  primary_email_in?: Maybe<String[] | String>;
  primary_email_not_in?: Maybe<String[] | String>;
  primary_email_lt?: Maybe<String>;
  primary_email_lte?: Maybe<String>;
  primary_email_gt?: Maybe<String>;
  primary_email_gte?: Maybe<String>;
  primary_email_contains?: Maybe<String>;
  primary_email_not_contains?: Maybe<String>;
  primary_email_starts_with?: Maybe<String>;
  primary_email_not_starts_with?: Maybe<String>;
  primary_email_ends_with?: Maybe<String>;
  primary_email_not_ends_with?: Maybe<String>;
  alt_email?: Maybe<String>;
  alt_email_not?: Maybe<String>;
  alt_email_in?: Maybe<String[] | String>;
  alt_email_not_in?: Maybe<String[] | String>;
  alt_email_lt?: Maybe<String>;
  alt_email_lte?: Maybe<String>;
  alt_email_gt?: Maybe<String>;
  alt_email_gte?: Maybe<String>;
  alt_email_contains?: Maybe<String>;
  alt_email_not_contains?: Maybe<String>;
  alt_email_starts_with?: Maybe<String>;
  alt_email_not_starts_with?: Maybe<String>;
  alt_email_ends_with?: Maybe<String>;
  alt_email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  perm_phone_number?: Maybe<String>;
  perm_phone_number_not?: Maybe<String>;
  perm_phone_number_in?: Maybe<String[] | String>;
  perm_phone_number_not_in?: Maybe<String[] | String>;
  perm_phone_number_lt?: Maybe<String>;
  perm_phone_number_lte?: Maybe<String>;
  perm_phone_number_gt?: Maybe<String>;
  perm_phone_number_gte?: Maybe<String>;
  perm_phone_number_contains?: Maybe<String>;
  perm_phone_number_not_contains?: Maybe<String>;
  perm_phone_number_starts_with?: Maybe<String>;
  perm_phone_number_not_starts_with?: Maybe<String>;
  perm_phone_number_ends_with?: Maybe<String>;
  perm_phone_number_not_ends_with?: Maybe<String>;
  other_phone_number?: Maybe<String>;
  other_phone_number_not?: Maybe<String>;
  other_phone_number_in?: Maybe<String[] | String>;
  other_phone_number_not_in?: Maybe<String[] | String>;
  other_phone_number_lt?: Maybe<String>;
  other_phone_number_lte?: Maybe<String>;
  other_phone_number_gt?: Maybe<String>;
  other_phone_number_gte?: Maybe<String>;
  other_phone_number_contains?: Maybe<String>;
  other_phone_number_not_contains?: Maybe<String>;
  other_phone_number_starts_with?: Maybe<String>;
  other_phone_number_not_starts_with?: Maybe<String>;
  other_phone_number_ends_with?: Maybe<String>;
  other_phone_number_not_ends_with?: Maybe<String>;
  role?: Maybe<String>;
  role_not?: Maybe<String>;
  role_in?: Maybe<String[] | String>;
  role_not_in?: Maybe<String[] | String>;
  role_lt?: Maybe<String>;
  role_lte?: Maybe<String>;
  role_gt?: Maybe<String>;
  role_gte?: Maybe<String>;
  role_contains?: Maybe<String>;
  role_not_contains?: Maybe<String>;
  role_starts_with?: Maybe<String>;
  role_not_starts_with?: Maybe<String>;
  role_ends_with?: Maybe<String>;
  role_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Boolean>;
  isDeleted_not?: Maybe<Boolean>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  last_name?: Maybe<String>;
  first_name?: Maybe<String>;
  primary_email?: Maybe<String>;
  alt_email?: Maybe<String>;
  password?: Maybe<String>;
  perm_phone_number?: Maybe<String>;
  other_phone_number?: Maybe<String>;
  role?: Maybe<String>;
  isDeleted?: Maybe<Boolean>;
}

export interface SiteUpsertWithoutBillsInput {
  update: SiteUpdateWithoutBillsDataInput;
  create: SiteCreateWithoutBillsInput;
}

export interface PaymentUpdateOneWithoutBillsInput {
  create?: Maybe<PaymentCreateWithoutBillsInput>;
  update?: Maybe<PaymentUpdateWithoutBillsDataInput>;
  upsert?: Maybe<PaymentUpsertWithoutBillsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PaymentWhereUniqueInput>;
}

export interface PaymentUpdateWithoutBillsDataInput {
  paid?: Maybe<Boolean>;
  payment_type?: Maybe<String>;
}

export interface PaymentUpsertWithoutBillsInput {
  update: PaymentUpdateWithoutBillsDataInput;
  create: PaymentCreateWithoutBillsInput;
}

export interface BillUpdateManyMutationInput {
  year?: Maybe<Int>;
  isPaid?: Maybe<Boolean>;
  payment_due?: Maybe<DateTimeInput>;
}

export interface PaymentCreateInput {
  paid?: Maybe<Boolean>;
  payment_type: String;
  bills?: Maybe<BillCreateManyWithoutPaymentInput>;
}

export interface BillCreateManyWithoutPaymentInput {
  create?: Maybe<
    BillCreateWithoutPaymentInput[] | BillCreateWithoutPaymentInput
  >;
  connect?: Maybe<BillWhereUniqueInput[] | BillWhereUniqueInput>;
}

export interface BillCreateWithoutPaymentInput {
  year: Int;
  isPaid?: Maybe<Boolean>;
  payment_due: DateTimeInput;
  site: SiteCreateOneWithoutBillsInput;
}

export interface PaymentUpdateInput {
  paid?: Maybe<Boolean>;
  payment_type?: Maybe<String>;
  bills?: Maybe<BillUpdateManyWithoutPaymentInput>;
}

export interface BillUpdateManyWithoutPaymentInput {
  create?: Maybe<
    BillCreateWithoutPaymentInput[] | BillCreateWithoutPaymentInput
  >;
  delete?: Maybe<BillWhereUniqueInput[] | BillWhereUniqueInput>;
  connect?: Maybe<BillWhereUniqueInput[] | BillWhereUniqueInput>;
  set?: Maybe<BillWhereUniqueInput[] | BillWhereUniqueInput>;
  disconnect?: Maybe<BillWhereUniqueInput[] | BillWhereUniqueInput>;
  update?: Maybe<
    | BillUpdateWithWhereUniqueWithoutPaymentInput[]
    | BillUpdateWithWhereUniqueWithoutPaymentInput
  >;
  upsert?: Maybe<
    | BillUpsertWithWhereUniqueWithoutPaymentInput[]
    | BillUpsertWithWhereUniqueWithoutPaymentInput
  >;
  deleteMany?: Maybe<BillScalarWhereInput[] | BillScalarWhereInput>;
  updateMany?: Maybe<
    BillUpdateManyWithWhereNestedInput[] | BillUpdateManyWithWhereNestedInput
  >;
}

export interface BillUpdateWithWhereUniqueWithoutPaymentInput {
  where: BillWhereUniqueInput;
  data: BillUpdateWithoutPaymentDataInput;
}

export interface BillUpdateWithoutPaymentDataInput {
  year?: Maybe<Int>;
  isPaid?: Maybe<Boolean>;
  payment_due?: Maybe<DateTimeInput>;
  site?: Maybe<SiteUpdateOneRequiredWithoutBillsInput>;
}

export interface BillUpsertWithWhereUniqueWithoutPaymentInput {
  where: BillWhereUniqueInput;
  update: BillUpdateWithoutPaymentDataInput;
  create: BillCreateWithoutPaymentInput;
}

export interface BillScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  year?: Maybe<Int>;
  year_not?: Maybe<Int>;
  year_in?: Maybe<Int[] | Int>;
  year_not_in?: Maybe<Int[] | Int>;
  year_lt?: Maybe<Int>;
  year_lte?: Maybe<Int>;
  year_gt?: Maybe<Int>;
  year_gte?: Maybe<Int>;
  isPaid?: Maybe<Boolean>;
  isPaid_not?: Maybe<Boolean>;
  payment_due?: Maybe<DateTimeInput>;
  payment_due_not?: Maybe<DateTimeInput>;
  payment_due_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  payment_due_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  payment_due_lt?: Maybe<DateTimeInput>;
  payment_due_lte?: Maybe<DateTimeInput>;
  payment_due_gt?: Maybe<DateTimeInput>;
  payment_due_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BillScalarWhereInput[] | BillScalarWhereInput>;
  OR?: Maybe<BillScalarWhereInput[] | BillScalarWhereInput>;
  NOT?: Maybe<BillScalarWhereInput[] | BillScalarWhereInput>;
}

export interface BillUpdateManyWithWhereNestedInput {
  where: BillScalarWhereInput;
  data: BillUpdateManyDataInput;
}

export interface BillUpdateManyDataInput {
  year?: Maybe<Int>;
  isPaid?: Maybe<Boolean>;
  payment_due?: Maybe<DateTimeInput>;
}

export interface PaymentUpdateManyMutationInput {
  paid?: Maybe<Boolean>;
  payment_type?: Maybe<String>;
}

export interface PermAddressCreateInput {
  address: String;
  city: String;
  state: String;
  zip_code: String;
  createdBy?: Maybe<UserCreateOneWithoutP_addressesInput>;
}

export interface UserCreateOneWithoutP_addressesInput {
  create?: Maybe<UserCreateWithoutP_addressesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutP_addressesInput {
  last_name: String;
  first_name: String;
  primary_email: String;
  alt_email?: Maybe<String>;
  password: String;
  perm_phone_number?: Maybe<String>;
  other_phone_number?: Maybe<String>;
  role?: Maybe<String>;
  isDeleted?: Maybe<Boolean>;
}

export interface PermAddressUpdateInput {
  address?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip_code?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneWithoutP_addressesInput>;
}

export interface UserUpdateOneWithoutP_addressesInput {
  create?: Maybe<UserCreateWithoutP_addressesInput>;
  update?: Maybe<UserUpdateWithoutP_addressesDataInput>;
  upsert?: Maybe<UserUpsertWithoutP_addressesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutP_addressesDataInput {
  last_name?: Maybe<String>;
  first_name?: Maybe<String>;
  primary_email?: Maybe<String>;
  alt_email?: Maybe<String>;
  password?: Maybe<String>;
  perm_phone_number?: Maybe<String>;
  other_phone_number?: Maybe<String>;
  role?: Maybe<String>;
  isDeleted?: Maybe<Boolean>;
}

export interface UserUpsertWithoutP_addressesInput {
  update: UserUpdateWithoutP_addressesDataInput;
  create: UserCreateWithoutP_addressesInput;
}

export interface PermAddressUpdateManyMutationInput {
  address?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zip_code?: Maybe<String>;
}

export interface SiteCreateInput {
  site_number: Int;
  tl_road_side: String;
  tl_address: String;
  land_company: String;
  owners_association: String;
  trout_lake_water: Boolean;
  users?: Maybe<UserCreateManyInput>;
  site_phone_number?: Maybe<String>;
  bills?: Maybe<BillCreateManyWithoutSiteInput>;
}

export interface BillCreateManyWithoutSiteInput {
  create?: Maybe<BillCreateWithoutSiteInput[] | BillCreateWithoutSiteInput>;
  connect?: Maybe<BillWhereUniqueInput[] | BillWhereUniqueInput>;
}

export interface BillCreateWithoutSiteInput {
  year: Int;
  isPaid?: Maybe<Boolean>;
  payment_due: DateTimeInput;
  payment?: Maybe<PaymentCreateOneWithoutBillsInput>;
}

export interface SiteUpdateInput {
  site_number?: Maybe<Int>;
  tl_road_side?: Maybe<String>;
  tl_address?: Maybe<String>;
  land_company?: Maybe<String>;
  owners_association?: Maybe<String>;
  trout_lake_water?: Maybe<Boolean>;
  users?: Maybe<UserUpdateManyInput>;
  site_phone_number?: Maybe<String>;
  bills?: Maybe<BillUpdateManyWithoutSiteInput>;
}

export interface BillUpdateManyWithoutSiteInput {
  create?: Maybe<BillCreateWithoutSiteInput[] | BillCreateWithoutSiteInput>;
  delete?: Maybe<BillWhereUniqueInput[] | BillWhereUniqueInput>;
  connect?: Maybe<BillWhereUniqueInput[] | BillWhereUniqueInput>;
  set?: Maybe<BillWhereUniqueInput[] | BillWhereUniqueInput>;
  disconnect?: Maybe<BillWhereUniqueInput[] | BillWhereUniqueInput>;
  update?: Maybe<
    | BillUpdateWithWhereUniqueWithoutSiteInput[]
    | BillUpdateWithWhereUniqueWithoutSiteInput
  >;
  upsert?: Maybe<
    | BillUpsertWithWhereUniqueWithoutSiteInput[]
    | BillUpsertWithWhereUniqueWithoutSiteInput
  >;
  deleteMany?: Maybe<BillScalarWhereInput[] | BillScalarWhereInput>;
  updateMany?: Maybe<
    BillUpdateManyWithWhereNestedInput[] | BillUpdateManyWithWhereNestedInput
  >;
}

export interface BillUpdateWithWhereUniqueWithoutSiteInput {
  where: BillWhereUniqueInput;
  data: BillUpdateWithoutSiteDataInput;
}

export interface BillUpdateWithoutSiteDataInput {
  year?: Maybe<Int>;
  isPaid?: Maybe<Boolean>;
  payment_due?: Maybe<DateTimeInput>;
  payment?: Maybe<PaymentUpdateOneWithoutBillsInput>;
}

export interface BillUpsertWithWhereUniqueWithoutSiteInput {
  where: BillWhereUniqueInput;
  update: BillUpdateWithoutSiteDataInput;
  create: BillCreateWithoutSiteInput;
}

export interface SiteUpdateManyMutationInput {
  site_number?: Maybe<Int>;
  tl_road_side?: Maybe<String>;
  tl_address?: Maybe<String>;
  land_company?: Maybe<String>;
  owners_association?: Maybe<String>;
  trout_lake_water?: Maybe<Boolean>;
  site_phone_number?: Maybe<String>;
}

export interface UserUpdateInput {
  last_name?: Maybe<String>;
  first_name?: Maybe<String>;
  primary_email?: Maybe<String>;
  alt_email?: Maybe<String>;
  password?: Maybe<String>;
  perm_phone_number?: Maybe<String>;
  other_phone_number?: Maybe<String>;
  p_addresses?: Maybe<PermAddressUpdateOneWithoutCreatedByInput>;
  role?: Maybe<String>;
  isDeleted?: Maybe<Boolean>;
}

export interface UserUpdateManyMutationInput {
  last_name?: Maybe<String>;
  first_name?: Maybe<String>;
  primary_email?: Maybe<String>;
  alt_email?: Maybe<String>;
  password?: Maybe<String>;
  perm_phone_number?: Maybe<String>;
  other_phone_number?: Maybe<String>;
  role?: Maybe<String>;
  isDeleted?: Maybe<Boolean>;
}

export interface BillSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BillWhereInput>;
  AND?: Maybe<BillSubscriptionWhereInput[] | BillSubscriptionWhereInput>;
  OR?: Maybe<BillSubscriptionWhereInput[] | BillSubscriptionWhereInput>;
  NOT?: Maybe<BillSubscriptionWhereInput[] | BillSubscriptionWhereInput>;
}

export interface PaymentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PaymentWhereInput>;
  AND?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  OR?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  NOT?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
}

export interface PermAddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PermAddressWhereInput>;
  AND?: Maybe<
    PermAddressSubscriptionWhereInput[] | PermAddressSubscriptionWhereInput
  >;
  OR?: Maybe<
    PermAddressSubscriptionWhereInput[] | PermAddressSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PermAddressSubscriptionWhereInput[] | PermAddressSubscriptionWhereInput
  >;
}

export interface SiteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SiteWhereInput>;
  AND?: Maybe<SiteSubscriptionWhereInput[] | SiteSubscriptionWhereInput>;
  OR?: Maybe<SiteSubscriptionWhereInput[] | SiteSubscriptionWhereInput>;
  NOT?: Maybe<SiteSubscriptionWhereInput[] | SiteSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Bill {
  id: ID_Output;
  year: Int;
  isPaid: Boolean;
  payment_due: DateTimeOutput;
}

export interface BillPromise extends Promise<Bill>, Fragmentable {
  id: () => Promise<ID_Output>;
  year: () => Promise<Int>;
  isPaid: () => Promise<Boolean>;
  payment_due: () => Promise<DateTimeOutput>;
  site: <T = SitePromise>() => T;
  payment: <T = PaymentPromise>() => T;
}

export interface BillSubscription
  extends Promise<AsyncIterator<Bill>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  year: () => Promise<AsyncIterator<Int>>;
  isPaid: () => Promise<AsyncIterator<Boolean>>;
  payment_due: () => Promise<AsyncIterator<DateTimeOutput>>;
  site: <T = SiteSubscription>() => T;
  payment: <T = PaymentSubscription>() => T;
}

export interface BillNullablePromise
  extends Promise<Bill | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  year: () => Promise<Int>;
  isPaid: () => Promise<Boolean>;
  payment_due: () => Promise<DateTimeOutput>;
  site: <T = SitePromise>() => T;
  payment: <T = PaymentPromise>() => T;
}

export interface Site {
  id: ID_Output;
  site_number: Int;
  tl_road_side: String;
  tl_address: String;
  land_company: String;
  owners_association: String;
  trout_lake_water: Boolean;
  site_phone_number?: String;
}

export interface SitePromise extends Promise<Site>, Fragmentable {
  id: () => Promise<ID_Output>;
  site_number: () => Promise<Int>;
  tl_road_side: () => Promise<String>;
  tl_address: () => Promise<String>;
  land_company: () => Promise<String>;
  owners_association: () => Promise<String>;
  trout_lake_water: () => Promise<Boolean>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  site_phone_number: () => Promise<String>;
  bills: <T = FragmentableArray<Bill>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SiteSubscription
  extends Promise<AsyncIterator<Site>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  site_number: () => Promise<AsyncIterator<Int>>;
  tl_road_side: () => Promise<AsyncIterator<String>>;
  tl_address: () => Promise<AsyncIterator<String>>;
  land_company: () => Promise<AsyncIterator<String>>;
  owners_association: () => Promise<AsyncIterator<String>>;
  trout_lake_water: () => Promise<AsyncIterator<Boolean>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  site_phone_number: () => Promise<AsyncIterator<String>>;
  bills: <T = Promise<AsyncIterator<BillSubscription>>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SiteNullablePromise
  extends Promise<Site | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  site_number: () => Promise<Int>;
  tl_road_side: () => Promise<String>;
  tl_address: () => Promise<String>;
  land_company: () => Promise<String>;
  owners_association: () => Promise<String>;
  trout_lake_water: () => Promise<Boolean>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  site_phone_number: () => Promise<String>;
  bills: <T = FragmentableArray<Bill>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  last_name: String;
  first_name: String;
  primary_email: String;
  alt_email?: String;
  password: String;
  perm_phone_number?: String;
  other_phone_number?: String;
  role: String;
  isDeleted: Boolean;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  last_name: () => Promise<String>;
  first_name: () => Promise<String>;
  primary_email: () => Promise<String>;
  alt_email: () => Promise<String>;
  password: () => Promise<String>;
  perm_phone_number: () => Promise<String>;
  other_phone_number: () => Promise<String>;
  p_addresses: <T = PermAddressPromise>() => T;
  role: () => Promise<String>;
  isDeleted: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  last_name: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  primary_email: () => Promise<AsyncIterator<String>>;
  alt_email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  perm_phone_number: () => Promise<AsyncIterator<String>>;
  other_phone_number: () => Promise<AsyncIterator<String>>;
  p_addresses: <T = PermAddressSubscription>() => T;
  role: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  last_name: () => Promise<String>;
  first_name: () => Promise<String>;
  primary_email: () => Promise<String>;
  alt_email: () => Promise<String>;
  password: () => Promise<String>;
  perm_phone_number: () => Promise<String>;
  other_phone_number: () => Promise<String>;
  p_addresses: <T = PermAddressPromise>() => T;
  role: () => Promise<String>;
  isDeleted: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PermAddress {
  id: ID_Output;
  address: String;
  city: String;
  state: String;
  zip_code: String;
}

export interface PermAddressPromise extends Promise<PermAddress>, Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip_code: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
}

export interface PermAddressSubscription
  extends Promise<AsyncIterator<PermAddress>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip_code: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
}

export interface PermAddressNullablePromise
  extends Promise<PermAddress | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip_code: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
}

export interface Payment {
  id: ID_Output;
  paid: Boolean;
  payment_type: String;
  date_paid: DateTimeOutput;
}

export interface PaymentPromise extends Promise<Payment>, Fragmentable {
  id: () => Promise<ID_Output>;
  paid: () => Promise<Boolean>;
  payment_type: () => Promise<String>;
  date_paid: () => Promise<DateTimeOutput>;
  bills: <T = FragmentableArray<Bill>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PaymentSubscription
  extends Promise<AsyncIterator<Payment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  paid: () => Promise<AsyncIterator<Boolean>>;
  payment_type: () => Promise<AsyncIterator<String>>;
  date_paid: () => Promise<AsyncIterator<DateTimeOutput>>;
  bills: <T = Promise<AsyncIterator<BillSubscription>>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PaymentNullablePromise
  extends Promise<Payment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  paid: () => Promise<Boolean>;
  payment_type: () => Promise<String>;
  date_paid: () => Promise<DateTimeOutput>;
  bills: <T = FragmentableArray<Bill>>(args?: {
    where?: BillWhereInput;
    orderBy?: BillOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BillConnection {
  pageInfo: PageInfo;
  edges: BillEdge[];
}

export interface BillConnectionPromise
  extends Promise<BillConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BillEdge>>() => T;
  aggregate: <T = AggregateBillPromise>() => T;
}

export interface BillConnectionSubscription
  extends Promise<AsyncIterator<BillConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BillEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBillSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BillEdge {
  node: Bill;
  cursor: String;
}

export interface BillEdgePromise extends Promise<BillEdge>, Fragmentable {
  node: <T = BillPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BillEdgeSubscription
  extends Promise<AsyncIterator<BillEdge>>,
    Fragmentable {
  node: <T = BillSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBill {
  count: Int;
}

export interface AggregateBillPromise
  extends Promise<AggregateBill>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBillSubscription
  extends Promise<AsyncIterator<AggregateBill>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PaymentConnection {
  pageInfo: PageInfo;
  edges: PaymentEdge[];
}

export interface PaymentConnectionPromise
  extends Promise<PaymentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PaymentEdge>>() => T;
  aggregate: <T = AggregatePaymentPromise>() => T;
}

export interface PaymentConnectionSubscription
  extends Promise<AsyncIterator<PaymentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PaymentEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePaymentSubscription>() => T;
}

export interface PaymentEdge {
  node: Payment;
  cursor: String;
}

export interface PaymentEdgePromise extends Promise<PaymentEdge>, Fragmentable {
  node: <T = PaymentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PaymentEdgeSubscription
  extends Promise<AsyncIterator<PaymentEdge>>,
    Fragmentable {
  node: <T = PaymentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePayment {
  count: Int;
}

export interface AggregatePaymentPromise
  extends Promise<AggregatePayment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePaymentSubscription
  extends Promise<AsyncIterator<AggregatePayment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PermAddressConnection {
  pageInfo: PageInfo;
  edges: PermAddressEdge[];
}

export interface PermAddressConnectionPromise
  extends Promise<PermAddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PermAddressEdge>>() => T;
  aggregate: <T = AggregatePermAddressPromise>() => T;
}

export interface PermAddressConnectionSubscription
  extends Promise<AsyncIterator<PermAddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PermAddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePermAddressSubscription>() => T;
}

export interface PermAddressEdge {
  node: PermAddress;
  cursor: String;
}

export interface PermAddressEdgePromise
  extends Promise<PermAddressEdge>,
    Fragmentable {
  node: <T = PermAddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PermAddressEdgeSubscription
  extends Promise<AsyncIterator<PermAddressEdge>>,
    Fragmentable {
  node: <T = PermAddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePermAddress {
  count: Int;
}

export interface AggregatePermAddressPromise
  extends Promise<AggregatePermAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePermAddressSubscription
  extends Promise<AsyncIterator<AggregatePermAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SiteConnection {
  pageInfo: PageInfo;
  edges: SiteEdge[];
}

export interface SiteConnectionPromise
  extends Promise<SiteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SiteEdge>>() => T;
  aggregate: <T = AggregateSitePromise>() => T;
}

export interface SiteConnectionSubscription
  extends Promise<AsyncIterator<SiteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SiteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSiteSubscription>() => T;
}

export interface SiteEdge {
  node: Site;
  cursor: String;
}

export interface SiteEdgePromise extends Promise<SiteEdge>, Fragmentable {
  node: <T = SitePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SiteEdgeSubscription
  extends Promise<AsyncIterator<SiteEdge>>,
    Fragmentable {
  node: <T = SiteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSite {
  count: Int;
}

export interface AggregateSitePromise
  extends Promise<AggregateSite>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSiteSubscription
  extends Promise<AsyncIterator<AggregateSite>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BillSubscriptionPayload {
  mutation: MutationType;
  node: Bill;
  updatedFields: String[];
  previousValues: BillPreviousValues;
}

export interface BillSubscriptionPayloadPromise
  extends Promise<BillSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BillPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BillPreviousValuesPromise>() => T;
}

export interface BillSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BillSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BillSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BillPreviousValuesSubscription>() => T;
}

export interface BillPreviousValues {
  id: ID_Output;
  year: Int;
  isPaid: Boolean;
  payment_due: DateTimeOutput;
}

export interface BillPreviousValuesPromise
  extends Promise<BillPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  year: () => Promise<Int>;
  isPaid: () => Promise<Boolean>;
  payment_due: () => Promise<DateTimeOutput>;
}

export interface BillPreviousValuesSubscription
  extends Promise<AsyncIterator<BillPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  year: () => Promise<AsyncIterator<Int>>;
  isPaid: () => Promise<AsyncIterator<Boolean>>;
  payment_due: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PaymentSubscriptionPayload {
  mutation: MutationType;
  node: Payment;
  updatedFields: String[];
  previousValues: PaymentPreviousValues;
}

export interface PaymentSubscriptionPayloadPromise
  extends Promise<PaymentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PaymentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PaymentPreviousValuesPromise>() => T;
}

export interface PaymentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PaymentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PaymentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PaymentPreviousValuesSubscription>() => T;
}

export interface PaymentPreviousValues {
  id: ID_Output;
  paid: Boolean;
  payment_type: String;
  date_paid: DateTimeOutput;
}

export interface PaymentPreviousValuesPromise
  extends Promise<PaymentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  paid: () => Promise<Boolean>;
  payment_type: () => Promise<String>;
  date_paid: () => Promise<DateTimeOutput>;
}

export interface PaymentPreviousValuesSubscription
  extends Promise<AsyncIterator<PaymentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  paid: () => Promise<AsyncIterator<Boolean>>;
  payment_type: () => Promise<AsyncIterator<String>>;
  date_paid: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PermAddressSubscriptionPayload {
  mutation: MutationType;
  node: PermAddress;
  updatedFields: String[];
  previousValues: PermAddressPreviousValues;
}

export interface PermAddressSubscriptionPayloadPromise
  extends Promise<PermAddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PermAddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PermAddressPreviousValuesPromise>() => T;
}

export interface PermAddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PermAddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PermAddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PermAddressPreviousValuesSubscription>() => T;
}

export interface PermAddressPreviousValues {
  id: ID_Output;
  address: String;
  city: String;
  state: String;
  zip_code: String;
}

export interface PermAddressPreviousValuesPromise
  extends Promise<PermAddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip_code: () => Promise<String>;
}

export interface PermAddressPreviousValuesSubscription
  extends Promise<AsyncIterator<PermAddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip_code: () => Promise<AsyncIterator<String>>;
}

export interface SiteSubscriptionPayload {
  mutation: MutationType;
  node: Site;
  updatedFields: String[];
  previousValues: SitePreviousValues;
}

export interface SiteSubscriptionPayloadPromise
  extends Promise<SiteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SitePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SitePreviousValuesPromise>() => T;
}

export interface SiteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SiteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SiteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SitePreviousValuesSubscription>() => T;
}

export interface SitePreviousValues {
  id: ID_Output;
  site_number: Int;
  tl_road_side: String;
  tl_address: String;
  land_company: String;
  owners_association: String;
  trout_lake_water: Boolean;
  site_phone_number?: String;
}

export interface SitePreviousValuesPromise
  extends Promise<SitePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  site_number: () => Promise<Int>;
  tl_road_side: () => Promise<String>;
  tl_address: () => Promise<String>;
  land_company: () => Promise<String>;
  owners_association: () => Promise<String>;
  trout_lake_water: () => Promise<Boolean>;
  site_phone_number: () => Promise<String>;
}

export interface SitePreviousValuesSubscription
  extends Promise<AsyncIterator<SitePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  site_number: () => Promise<AsyncIterator<Int>>;
  tl_road_side: () => Promise<AsyncIterator<String>>;
  tl_address: () => Promise<AsyncIterator<String>>;
  land_company: () => Promise<AsyncIterator<String>>;
  owners_association: () => Promise<AsyncIterator<String>>;
  trout_lake_water: () => Promise<AsyncIterator<Boolean>>;
  site_phone_number: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  last_name: String;
  first_name: String;
  primary_email: String;
  alt_email?: String;
  password: String;
  perm_phone_number?: String;
  other_phone_number?: String;
  role: String;
  isDeleted: Boolean;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  last_name: () => Promise<String>;
  first_name: () => Promise<String>;
  primary_email: () => Promise<String>;
  alt_email: () => Promise<String>;
  password: () => Promise<String>;
  perm_phone_number: () => Promise<String>;
  other_phone_number: () => Promise<String>;
  role: () => Promise<String>;
  isDeleted: () => Promise<Boolean>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  last_name: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  primary_email: () => Promise<AsyncIterator<String>>;
  alt_email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  perm_phone_number: () => Promise<AsyncIterator<String>>;
  other_phone_number: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Boolean>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "PermAddress",
    embedded: false
  },
  {
    name: "Site",
    embedded: false
  },
  {
    name: "Bill",
    embedded: false
  },
  {
    name: "Payment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
