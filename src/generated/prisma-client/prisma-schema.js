module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBill {
  count: Int!
}

type AggregateOwner {
  count: Int!
}

type AggregatePayment {
  count: Int!
}

type AggregatePermAddress {
  count: Int!
}

type AggregateSite {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Bill {
  id: ID!
  year: Int!
  payment: Payment
  payment_due: DateTime!
  site: Site
}

type BillConnection {
  pageInfo: PageInfo!
  edges: [BillEdge]!
  aggregate: AggregateBill!
}

input BillCreateInput {
  year: Int!
  payment: PaymentCreateOneWithoutBillsInput
  payment_due: DateTime!
  site: SiteCreateOneInput
}

input BillCreateManyWithoutPaymentInput {
  create: [BillCreateWithoutPaymentInput!]
  connect: [BillWhereUniqueInput!]
}

input BillCreateWithoutPaymentInput {
  year: Int!
  payment_due: DateTime!
  site: SiteCreateOneInput
}

type BillEdge {
  node: Bill!
  cursor: String!
}

enum BillOrderByInput {
  id_ASC
  id_DESC
  year_ASC
  year_DESC
  payment_due_ASC
  payment_due_DESC
}

type BillPreviousValues {
  id: ID!
  year: Int!
  payment_due: DateTime!
}

input BillScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  year: Int
  year_not: Int
  year_in: [Int!]
  year_not_in: [Int!]
  year_lt: Int
  year_lte: Int
  year_gt: Int
  year_gte: Int
  payment_due: DateTime
  payment_due_not: DateTime
  payment_due_in: [DateTime!]
  payment_due_not_in: [DateTime!]
  payment_due_lt: DateTime
  payment_due_lte: DateTime
  payment_due_gt: DateTime
  payment_due_gte: DateTime
  AND: [BillScalarWhereInput!]
  OR: [BillScalarWhereInput!]
  NOT: [BillScalarWhereInput!]
}

type BillSubscriptionPayload {
  mutation: MutationType!
  node: Bill
  updatedFields: [String!]
  previousValues: BillPreviousValues
}

input BillSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BillWhereInput
  AND: [BillSubscriptionWhereInput!]
  OR: [BillSubscriptionWhereInput!]
  NOT: [BillSubscriptionWhereInput!]
}

input BillUpdateInput {
  year: Int
  payment: PaymentUpdateOneWithoutBillsInput
  payment_due: DateTime
  site: SiteUpdateOneInput
}

input BillUpdateManyDataInput {
  year: Int
  payment_due: DateTime
}

input BillUpdateManyMutationInput {
  year: Int
  payment_due: DateTime
}

input BillUpdateManyWithoutPaymentInput {
  create: [BillCreateWithoutPaymentInput!]
  delete: [BillWhereUniqueInput!]
  connect: [BillWhereUniqueInput!]
  set: [BillWhereUniqueInput!]
  disconnect: [BillWhereUniqueInput!]
  update: [BillUpdateWithWhereUniqueWithoutPaymentInput!]
  upsert: [BillUpsertWithWhereUniqueWithoutPaymentInput!]
  deleteMany: [BillScalarWhereInput!]
  updateMany: [BillUpdateManyWithWhereNestedInput!]
}

input BillUpdateManyWithWhereNestedInput {
  where: BillScalarWhereInput!
  data: BillUpdateManyDataInput!
}

input BillUpdateWithoutPaymentDataInput {
  year: Int
  payment_due: DateTime
  site: SiteUpdateOneInput
}

input BillUpdateWithWhereUniqueWithoutPaymentInput {
  where: BillWhereUniqueInput!
  data: BillUpdateWithoutPaymentDataInput!
}

input BillUpsertWithWhereUniqueWithoutPaymentInput {
  where: BillWhereUniqueInput!
  update: BillUpdateWithoutPaymentDataInput!
  create: BillCreateWithoutPaymentInput!
}

input BillWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  year: Int
  year_not: Int
  year_in: [Int!]
  year_not_in: [Int!]
  year_lt: Int
  year_lte: Int
  year_gt: Int
  year_gte: Int
  payment: PaymentWhereInput
  payment_due: DateTime
  payment_due_not: DateTime
  payment_due_in: [DateTime!]
  payment_due_not_in: [DateTime!]
  payment_due_lt: DateTime
  payment_due_lte: DateTime
  payment_due_gt: DateTime
  payment_due_gte: DateTime
  site: SiteWhereInput
  AND: [BillWhereInput!]
  OR: [BillWhereInput!]
  NOT: [BillWhereInput!]
}

input BillWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createBill(data: BillCreateInput!): Bill!
  updateBill(data: BillUpdateInput!, where: BillWhereUniqueInput!): Bill
  updateManyBills(data: BillUpdateManyMutationInput!, where: BillWhereInput): BatchPayload!
  upsertBill(where: BillWhereUniqueInput!, create: BillCreateInput!, update: BillUpdateInput!): Bill!
  deleteBill(where: BillWhereUniqueInput!): Bill
  deleteManyBills(where: BillWhereInput): BatchPayload!
  createOwner(data: OwnerCreateInput!): Owner!
  updateOwner(data: OwnerUpdateInput!, where: OwnerWhereUniqueInput!): Owner
  updateManyOwners(data: OwnerUpdateManyMutationInput!, where: OwnerWhereInput): BatchPayload!
  upsertOwner(where: OwnerWhereUniqueInput!, create: OwnerCreateInput!, update: OwnerUpdateInput!): Owner!
  deleteOwner(where: OwnerWhereUniqueInput!): Owner
  deleteManyOwners(where: OwnerWhereInput): BatchPayload!
  createPayment(data: PaymentCreateInput!): Payment!
  updatePayment(data: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment
  updateManyPayments(data: PaymentUpdateManyMutationInput!, where: PaymentWhereInput): BatchPayload!
  upsertPayment(where: PaymentWhereUniqueInput!, create: PaymentCreateInput!, update: PaymentUpdateInput!): Payment!
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deleteManyPayments(where: PaymentWhereInput): BatchPayload!
  createPermAddress(data: PermAddressCreateInput!): PermAddress!
  updatePermAddress(data: PermAddressUpdateInput!, where: PermAddressWhereUniqueInput!): PermAddress
  updateManyPermAddresses(data: PermAddressUpdateManyMutationInput!, where: PermAddressWhereInput): BatchPayload!
  upsertPermAddress(where: PermAddressWhereUniqueInput!, create: PermAddressCreateInput!, update: PermAddressUpdateInput!): PermAddress!
  deletePermAddress(where: PermAddressWhereUniqueInput!): PermAddress
  deleteManyPermAddresses(where: PermAddressWhereInput): BatchPayload!
  createSite(data: SiteCreateInput!): Site!
  updateSite(data: SiteUpdateInput!, where: SiteWhereUniqueInput!): Site
  updateManySites(data: SiteUpdateManyMutationInput!, where: SiteWhereInput): BatchPayload!
  upsertSite(where: SiteWhereUniqueInput!, create: SiteCreateInput!, update: SiteUpdateInput!): Site!
  deleteSite(where: SiteWhereUniqueInput!): Site
  deleteManySites(where: SiteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Owner {
  id: ID!
  last_name: String!
  first_name: String!
  primary_email: String!
  alt_email: String
  password: String!
  perm_phone_number: String
  other_phone_number: String
  p_addresses: PermAddress
  updatedAt: DateTime!
}

type OwnerConnection {
  pageInfo: PageInfo!
  edges: [OwnerEdge]!
  aggregate: AggregateOwner!
}

input OwnerCreateInput {
  last_name: String!
  first_name: String!
  primary_email: String!
  alt_email: String
  password: String!
  perm_phone_number: String
  other_phone_number: String
  p_addresses: PermAddressCreateOneWithoutCreatedByInput
}

input OwnerCreateManyInput {
  create: [OwnerCreateInput!]
  connect: [OwnerWhereUniqueInput!]
}

input OwnerCreateOneWithoutP_addressesInput {
  create: OwnerCreateWithoutP_addressesInput
  connect: OwnerWhereUniqueInput
}

input OwnerCreateWithoutP_addressesInput {
  last_name: String!
  first_name: String!
  primary_email: String!
  alt_email: String
  password: String!
  perm_phone_number: String
  other_phone_number: String
}

type OwnerEdge {
  node: Owner!
  cursor: String!
}

enum OwnerOrderByInput {
  id_ASC
  id_DESC
  last_name_ASC
  last_name_DESC
  first_name_ASC
  first_name_DESC
  primary_email_ASC
  primary_email_DESC
  alt_email_ASC
  alt_email_DESC
  password_ASC
  password_DESC
  perm_phone_number_ASC
  perm_phone_number_DESC
  other_phone_number_ASC
  other_phone_number_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OwnerPreviousValues {
  id: ID!
  last_name: String!
  first_name: String!
  primary_email: String!
  alt_email: String
  password: String!
  perm_phone_number: String
  other_phone_number: String
  updatedAt: DateTime!
}

input OwnerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  primary_email: String
  primary_email_not: String
  primary_email_in: [String!]
  primary_email_not_in: [String!]
  primary_email_lt: String
  primary_email_lte: String
  primary_email_gt: String
  primary_email_gte: String
  primary_email_contains: String
  primary_email_not_contains: String
  primary_email_starts_with: String
  primary_email_not_starts_with: String
  primary_email_ends_with: String
  primary_email_not_ends_with: String
  alt_email: String
  alt_email_not: String
  alt_email_in: [String!]
  alt_email_not_in: [String!]
  alt_email_lt: String
  alt_email_lte: String
  alt_email_gt: String
  alt_email_gte: String
  alt_email_contains: String
  alt_email_not_contains: String
  alt_email_starts_with: String
  alt_email_not_starts_with: String
  alt_email_ends_with: String
  alt_email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  perm_phone_number: String
  perm_phone_number_not: String
  perm_phone_number_in: [String!]
  perm_phone_number_not_in: [String!]
  perm_phone_number_lt: String
  perm_phone_number_lte: String
  perm_phone_number_gt: String
  perm_phone_number_gte: String
  perm_phone_number_contains: String
  perm_phone_number_not_contains: String
  perm_phone_number_starts_with: String
  perm_phone_number_not_starts_with: String
  perm_phone_number_ends_with: String
  perm_phone_number_not_ends_with: String
  other_phone_number: String
  other_phone_number_not: String
  other_phone_number_in: [String!]
  other_phone_number_not_in: [String!]
  other_phone_number_lt: String
  other_phone_number_lte: String
  other_phone_number_gt: String
  other_phone_number_gte: String
  other_phone_number_contains: String
  other_phone_number_not_contains: String
  other_phone_number_starts_with: String
  other_phone_number_not_starts_with: String
  other_phone_number_ends_with: String
  other_phone_number_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OwnerScalarWhereInput!]
  OR: [OwnerScalarWhereInput!]
  NOT: [OwnerScalarWhereInput!]
}

type OwnerSubscriptionPayload {
  mutation: MutationType!
  node: Owner
  updatedFields: [String!]
  previousValues: OwnerPreviousValues
}

input OwnerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OwnerWhereInput
  AND: [OwnerSubscriptionWhereInput!]
  OR: [OwnerSubscriptionWhereInput!]
  NOT: [OwnerSubscriptionWhereInput!]
}

input OwnerUpdateDataInput {
  last_name: String
  first_name: String
  primary_email: String
  alt_email: String
  password: String
  perm_phone_number: String
  other_phone_number: String
  p_addresses: PermAddressUpdateOneWithoutCreatedByInput
}

input OwnerUpdateInput {
  last_name: String
  first_name: String
  primary_email: String
  alt_email: String
  password: String
  perm_phone_number: String
  other_phone_number: String
  p_addresses: PermAddressUpdateOneWithoutCreatedByInput
}

input OwnerUpdateManyDataInput {
  last_name: String
  first_name: String
  primary_email: String
  alt_email: String
  password: String
  perm_phone_number: String
  other_phone_number: String
}

input OwnerUpdateManyInput {
  create: [OwnerCreateInput!]
  update: [OwnerUpdateWithWhereUniqueNestedInput!]
  upsert: [OwnerUpsertWithWhereUniqueNestedInput!]
  delete: [OwnerWhereUniqueInput!]
  connect: [OwnerWhereUniqueInput!]
  set: [OwnerWhereUniqueInput!]
  disconnect: [OwnerWhereUniqueInput!]
  deleteMany: [OwnerScalarWhereInput!]
  updateMany: [OwnerUpdateManyWithWhereNestedInput!]
}

input OwnerUpdateManyMutationInput {
  last_name: String
  first_name: String
  primary_email: String
  alt_email: String
  password: String
  perm_phone_number: String
  other_phone_number: String
}

input OwnerUpdateManyWithWhereNestedInput {
  where: OwnerScalarWhereInput!
  data: OwnerUpdateManyDataInput!
}

input OwnerUpdateOneWithoutP_addressesInput {
  create: OwnerCreateWithoutP_addressesInput
  update: OwnerUpdateWithoutP_addressesDataInput
  upsert: OwnerUpsertWithoutP_addressesInput
  delete: Boolean
  disconnect: Boolean
  connect: OwnerWhereUniqueInput
}

input OwnerUpdateWithoutP_addressesDataInput {
  last_name: String
  first_name: String
  primary_email: String
  alt_email: String
  password: String
  perm_phone_number: String
  other_phone_number: String
}

input OwnerUpdateWithWhereUniqueNestedInput {
  where: OwnerWhereUniqueInput!
  data: OwnerUpdateDataInput!
}

input OwnerUpsertWithoutP_addressesInput {
  update: OwnerUpdateWithoutP_addressesDataInput!
  create: OwnerCreateWithoutP_addressesInput!
}

input OwnerUpsertWithWhereUniqueNestedInput {
  where: OwnerWhereUniqueInput!
  update: OwnerUpdateDataInput!
  create: OwnerCreateInput!
}

input OwnerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  primary_email: String
  primary_email_not: String
  primary_email_in: [String!]
  primary_email_not_in: [String!]
  primary_email_lt: String
  primary_email_lte: String
  primary_email_gt: String
  primary_email_gte: String
  primary_email_contains: String
  primary_email_not_contains: String
  primary_email_starts_with: String
  primary_email_not_starts_with: String
  primary_email_ends_with: String
  primary_email_not_ends_with: String
  alt_email: String
  alt_email_not: String
  alt_email_in: [String!]
  alt_email_not_in: [String!]
  alt_email_lt: String
  alt_email_lte: String
  alt_email_gt: String
  alt_email_gte: String
  alt_email_contains: String
  alt_email_not_contains: String
  alt_email_starts_with: String
  alt_email_not_starts_with: String
  alt_email_ends_with: String
  alt_email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  perm_phone_number: String
  perm_phone_number_not: String
  perm_phone_number_in: [String!]
  perm_phone_number_not_in: [String!]
  perm_phone_number_lt: String
  perm_phone_number_lte: String
  perm_phone_number_gt: String
  perm_phone_number_gte: String
  perm_phone_number_contains: String
  perm_phone_number_not_contains: String
  perm_phone_number_starts_with: String
  perm_phone_number_not_starts_with: String
  perm_phone_number_ends_with: String
  perm_phone_number_not_ends_with: String
  other_phone_number: String
  other_phone_number_not: String
  other_phone_number_in: [String!]
  other_phone_number_not_in: [String!]
  other_phone_number_lt: String
  other_phone_number_lte: String
  other_phone_number_gt: String
  other_phone_number_gte: String
  other_phone_number_contains: String
  other_phone_number_not_contains: String
  other_phone_number_starts_with: String
  other_phone_number_not_starts_with: String
  other_phone_number_ends_with: String
  other_phone_number_not_ends_with: String
  p_addresses: PermAddressWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OwnerWhereInput!]
  OR: [OwnerWhereInput!]
  NOT: [OwnerWhereInput!]
}

input OwnerWhereUniqueInput {
  id: ID
  primary_email: String
  alt_email: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Payment {
  id: ID!
  paid: Boolean!
  payment_type: String!
  date_paid: DateTime!
  bills(where: BillWhereInput, orderBy: BillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bill!]
}

type PaymentConnection {
  pageInfo: PageInfo!
  edges: [PaymentEdge]!
  aggregate: AggregatePayment!
}

input PaymentCreateInput {
  paid: Boolean
  payment_type: String!
  bills: BillCreateManyWithoutPaymentInput
}

input PaymentCreateOneWithoutBillsInput {
  create: PaymentCreateWithoutBillsInput
  connect: PaymentWhereUniqueInput
}

input PaymentCreateWithoutBillsInput {
  paid: Boolean
  payment_type: String!
}

type PaymentEdge {
  node: Payment!
  cursor: String!
}

enum PaymentOrderByInput {
  id_ASC
  id_DESC
  paid_ASC
  paid_DESC
  payment_type_ASC
  payment_type_DESC
  date_paid_ASC
  date_paid_DESC
}

type PaymentPreviousValues {
  id: ID!
  paid: Boolean!
  payment_type: String!
  date_paid: DateTime!
}

type PaymentSubscriptionPayload {
  mutation: MutationType!
  node: Payment
  updatedFields: [String!]
  previousValues: PaymentPreviousValues
}

input PaymentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaymentWhereInput
  AND: [PaymentSubscriptionWhereInput!]
  OR: [PaymentSubscriptionWhereInput!]
  NOT: [PaymentSubscriptionWhereInput!]
}

input PaymentUpdateInput {
  paid: Boolean
  payment_type: String
  bills: BillUpdateManyWithoutPaymentInput
}

input PaymentUpdateManyMutationInput {
  paid: Boolean
  payment_type: String
}

input PaymentUpdateOneWithoutBillsInput {
  create: PaymentCreateWithoutBillsInput
  update: PaymentUpdateWithoutBillsDataInput
  upsert: PaymentUpsertWithoutBillsInput
  delete: Boolean
  disconnect: Boolean
  connect: PaymentWhereUniqueInput
}

input PaymentUpdateWithoutBillsDataInput {
  paid: Boolean
  payment_type: String
}

input PaymentUpsertWithoutBillsInput {
  update: PaymentUpdateWithoutBillsDataInput!
  create: PaymentCreateWithoutBillsInput!
}

input PaymentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  paid: Boolean
  paid_not: Boolean
  payment_type: String
  payment_type_not: String
  payment_type_in: [String!]
  payment_type_not_in: [String!]
  payment_type_lt: String
  payment_type_lte: String
  payment_type_gt: String
  payment_type_gte: String
  payment_type_contains: String
  payment_type_not_contains: String
  payment_type_starts_with: String
  payment_type_not_starts_with: String
  payment_type_ends_with: String
  payment_type_not_ends_with: String
  date_paid: DateTime
  date_paid_not: DateTime
  date_paid_in: [DateTime!]
  date_paid_not_in: [DateTime!]
  date_paid_lt: DateTime
  date_paid_lte: DateTime
  date_paid_gt: DateTime
  date_paid_gte: DateTime
  bills_every: BillWhereInput
  bills_some: BillWhereInput
  bills_none: BillWhereInput
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
}

input PaymentWhereUniqueInput {
  id: ID
}

type PermAddress {
  id: ID!
  address: String!
  city: String!
  state: String!
  zip_code: String!
  createdBy: Owner
}

type PermAddressConnection {
  pageInfo: PageInfo!
  edges: [PermAddressEdge]!
  aggregate: AggregatePermAddress!
}

input PermAddressCreateInput {
  address: String!
  city: String!
  state: String!
  zip_code: String!
  createdBy: OwnerCreateOneWithoutP_addressesInput
}

input PermAddressCreateOneWithoutCreatedByInput {
  create: PermAddressCreateWithoutCreatedByInput
  connect: PermAddressWhereUniqueInput
}

input PermAddressCreateWithoutCreatedByInput {
  address: String!
  city: String!
  state: String!
  zip_code: String!
}

type PermAddressEdge {
  node: PermAddress!
  cursor: String!
}

enum PermAddressOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_code_ASC
  zip_code_DESC
}

type PermAddressPreviousValues {
  id: ID!
  address: String!
  city: String!
  state: String!
  zip_code: String!
}

type PermAddressSubscriptionPayload {
  mutation: MutationType!
  node: PermAddress
  updatedFields: [String!]
  previousValues: PermAddressPreviousValues
}

input PermAddressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PermAddressWhereInput
  AND: [PermAddressSubscriptionWhereInput!]
  OR: [PermAddressSubscriptionWhereInput!]
  NOT: [PermAddressSubscriptionWhereInput!]
}

input PermAddressUpdateInput {
  address: String
  city: String
  state: String
  zip_code: String
  createdBy: OwnerUpdateOneWithoutP_addressesInput
}

input PermAddressUpdateManyMutationInput {
  address: String
  city: String
  state: String
  zip_code: String
}

input PermAddressUpdateOneWithoutCreatedByInput {
  create: PermAddressCreateWithoutCreatedByInput
  update: PermAddressUpdateWithoutCreatedByDataInput
  upsert: PermAddressUpsertWithoutCreatedByInput
  delete: Boolean
  disconnect: Boolean
  connect: PermAddressWhereUniqueInput
}

input PermAddressUpdateWithoutCreatedByDataInput {
  address: String
  city: String
  state: String
  zip_code: String
}

input PermAddressUpsertWithoutCreatedByInput {
  update: PermAddressUpdateWithoutCreatedByDataInput!
  create: PermAddressCreateWithoutCreatedByInput!
}

input PermAddressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zip_code: String
  zip_code_not: String
  zip_code_in: [String!]
  zip_code_not_in: [String!]
  zip_code_lt: String
  zip_code_lte: String
  zip_code_gt: String
  zip_code_gte: String
  zip_code_contains: String
  zip_code_not_contains: String
  zip_code_starts_with: String
  zip_code_not_starts_with: String
  zip_code_ends_with: String
  zip_code_not_ends_with: String
  createdBy: OwnerWhereInput
  AND: [PermAddressWhereInput!]
  OR: [PermAddressWhereInput!]
  NOT: [PermAddressWhereInput!]
}

input PermAddressWhereUniqueInput {
  id: ID
}

type Query {
  bill(where: BillWhereUniqueInput!): Bill
  bills(where: BillWhereInput, orderBy: BillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bill]!
  billsConnection(where: BillWhereInput, orderBy: BillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BillConnection!
  owner(where: OwnerWhereUniqueInput!): Owner
  owners(where: OwnerWhereInput, orderBy: OwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Owner]!
  ownersConnection(where: OwnerWhereInput, orderBy: OwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OwnerConnection!
  payment(where: PaymentWhereUniqueInput!): Payment
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment]!
  paymentsConnection(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentConnection!
  permAddress(where: PermAddressWhereUniqueInput!): PermAddress
  permAddresses(where: PermAddressWhereInput, orderBy: PermAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PermAddress]!
  permAddressesConnection(where: PermAddressWhereInput, orderBy: PermAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PermAddressConnection!
  site(where: SiteWhereUniqueInput!): Site
  sites(where: SiteWhereInput, orderBy: SiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Site]!
  sitesConnection(where: SiteWhereInput, orderBy: SiteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SiteConnection!
  node(id: ID!): Node
}

type Site {
  id: ID!
  site_number: Int!
  tl_road_side: String!
  tl_address: String!
  land_company: String!
  owners_association: String!
  trout_lake_water: Boolean!
  owners(where: OwnerWhereInput, orderBy: OwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Owner!]
  site_phone_number: String
}

type SiteConnection {
  pageInfo: PageInfo!
  edges: [SiteEdge]!
  aggregate: AggregateSite!
}

input SiteCreateInput {
  site_number: Int!
  tl_road_side: String!
  tl_address: String!
  land_company: String!
  owners_association: String!
  trout_lake_water: Boolean!
  owners: OwnerCreateManyInput
  site_phone_number: String
}

input SiteCreateOneInput {
  create: SiteCreateInput
  connect: SiteWhereUniqueInput
}

type SiteEdge {
  node: Site!
  cursor: String!
}

enum SiteOrderByInput {
  id_ASC
  id_DESC
  site_number_ASC
  site_number_DESC
  tl_road_side_ASC
  tl_road_side_DESC
  tl_address_ASC
  tl_address_DESC
  land_company_ASC
  land_company_DESC
  owners_association_ASC
  owners_association_DESC
  trout_lake_water_ASC
  trout_lake_water_DESC
  site_phone_number_ASC
  site_phone_number_DESC
}

type SitePreviousValues {
  id: ID!
  site_number: Int!
  tl_road_side: String!
  tl_address: String!
  land_company: String!
  owners_association: String!
  trout_lake_water: Boolean!
  site_phone_number: String
}

type SiteSubscriptionPayload {
  mutation: MutationType!
  node: Site
  updatedFields: [String!]
  previousValues: SitePreviousValues
}

input SiteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SiteWhereInput
  AND: [SiteSubscriptionWhereInput!]
  OR: [SiteSubscriptionWhereInput!]
  NOT: [SiteSubscriptionWhereInput!]
}

input SiteUpdateDataInput {
  site_number: Int
  tl_road_side: String
  tl_address: String
  land_company: String
  owners_association: String
  trout_lake_water: Boolean
  owners: OwnerUpdateManyInput
  site_phone_number: String
}

input SiteUpdateInput {
  site_number: Int
  tl_road_side: String
  tl_address: String
  land_company: String
  owners_association: String
  trout_lake_water: Boolean
  owners: OwnerUpdateManyInput
  site_phone_number: String
}

input SiteUpdateManyMutationInput {
  site_number: Int
  tl_road_side: String
  tl_address: String
  land_company: String
  owners_association: String
  trout_lake_water: Boolean
  site_phone_number: String
}

input SiteUpdateOneInput {
  create: SiteCreateInput
  update: SiteUpdateDataInput
  upsert: SiteUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: SiteWhereUniqueInput
}

input SiteUpsertNestedInput {
  update: SiteUpdateDataInput!
  create: SiteCreateInput!
}

input SiteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  site_number: Int
  site_number_not: Int
  site_number_in: [Int!]
  site_number_not_in: [Int!]
  site_number_lt: Int
  site_number_lte: Int
  site_number_gt: Int
  site_number_gte: Int
  tl_road_side: String
  tl_road_side_not: String
  tl_road_side_in: [String!]
  tl_road_side_not_in: [String!]
  tl_road_side_lt: String
  tl_road_side_lte: String
  tl_road_side_gt: String
  tl_road_side_gte: String
  tl_road_side_contains: String
  tl_road_side_not_contains: String
  tl_road_side_starts_with: String
  tl_road_side_not_starts_with: String
  tl_road_side_ends_with: String
  tl_road_side_not_ends_with: String
  tl_address: String
  tl_address_not: String
  tl_address_in: [String!]
  tl_address_not_in: [String!]
  tl_address_lt: String
  tl_address_lte: String
  tl_address_gt: String
  tl_address_gte: String
  tl_address_contains: String
  tl_address_not_contains: String
  tl_address_starts_with: String
  tl_address_not_starts_with: String
  tl_address_ends_with: String
  tl_address_not_ends_with: String
  land_company: String
  land_company_not: String
  land_company_in: [String!]
  land_company_not_in: [String!]
  land_company_lt: String
  land_company_lte: String
  land_company_gt: String
  land_company_gte: String
  land_company_contains: String
  land_company_not_contains: String
  land_company_starts_with: String
  land_company_not_starts_with: String
  land_company_ends_with: String
  land_company_not_ends_with: String
  owners_association: String
  owners_association_not: String
  owners_association_in: [String!]
  owners_association_not_in: [String!]
  owners_association_lt: String
  owners_association_lte: String
  owners_association_gt: String
  owners_association_gte: String
  owners_association_contains: String
  owners_association_not_contains: String
  owners_association_starts_with: String
  owners_association_not_starts_with: String
  owners_association_ends_with: String
  owners_association_not_ends_with: String
  trout_lake_water: Boolean
  trout_lake_water_not: Boolean
  owners_every: OwnerWhereInput
  owners_some: OwnerWhereInput
  owners_none: OwnerWhereInput
  site_phone_number: String
  site_phone_number_not: String
  site_phone_number_in: [String!]
  site_phone_number_not_in: [String!]
  site_phone_number_lt: String
  site_phone_number_lte: String
  site_phone_number_gt: String
  site_phone_number_gte: String
  site_phone_number_contains: String
  site_phone_number_not_contains: String
  site_phone_number_starts_with: String
  site_phone_number_not_starts_with: String
  site_phone_number_ends_with: String
  site_phone_number_not_ends_with: String
  AND: [SiteWhereInput!]
  OR: [SiteWhereInput!]
  NOT: [SiteWhereInput!]
}

input SiteWhereUniqueInput {
  id: ID
  site_number: Int
}

type Subscription {
  bill(where: BillSubscriptionWhereInput): BillSubscriptionPayload
  owner(where: OwnerSubscriptionWhereInput): OwnerSubscriptionPayload
  payment(where: PaymentSubscriptionWhereInput): PaymentSubscriptionPayload
  permAddress(where: PermAddressSubscriptionWhereInput): PermAddressSubscriptionPayload
  site(where: SiteSubscriptionWhereInput): SiteSubscriptionPayload
}
`
      }
    